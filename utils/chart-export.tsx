import html2canvas from 'html2canvas'
import jsPDF from 'jspdf'
import * as XLSX from 'xlsx'

interface ExportOptions {
  title: string;
  data: any[];
  chartRef: React.RefObject<HTMLDivElement>;
  clientName?: string;
}

/**
 * Exports a chart to PDF with company branding, title, and disclaimer
 */
export const exportChartToPDF = async ({ title, chartRef, clientName = "(client organization name)" }: ExportOptions) => {
  if (!chartRef.current) return;
  
  try {
    // Create a new div to include both the chart and the disclaimer
    const fullPageDiv = document.createElement('div')
    fullPageDiv.style.position = 'absolute'
    fullPageDiv.style.left = '-9999px'
    fullPageDiv.style.top = '-9999px'
    fullPageDiv.style.width = '1200px'
    fullPageDiv.style.backgroundColor = 'white'
    document.body.appendChild(fullPageDiv)
    
    // Create header with company name and logo
    const headerDiv = document.createElement('div')
    headerDiv.style.display = 'flex'
    headerDiv.style.alignItems = 'center'
    headerDiv.style.justifyContent = 'space-between'
    headerDiv.style.padding = '20px'
    headerDiv.style.borderBottom = '1px solid #eaeaea'
    
    // Add company logo
    const logoDiv = document.createElement('div')
    const logoImg = document.createElement('img')
    logoImg.src = '/logo.png'
    logoImg.style.height = '50px'
    logoImg.alt = 'PixWingAi Logo'
    logoDiv.appendChild(logoImg)
    
    // Add title and timestamp
    const titleDiv = document.createElement('div')
    titleDiv.style.textAlign = 'center'
    titleDiv.style.flex = '1'
    
    const titleText = document.createElement('h2')
    titleText.textContent = 'PixWingAi Pvt Ltd'
    titleText.style.margin = '0'
    titleText.style.fontSize = '22px'
    titleText.style.fontWeight = 'bold'
    titleText.style.color = '#333'
    
    const subtitleText = document.createElement('h3')
    subtitleText.textContent = title
    subtitleText.style.margin = '5px 0'
    subtitleText.style.fontSize = '18px'
    subtitleText.style.color = '#555'
    
    // Add timestamp
    const now = new Date()
    const timestampText = document.createElement('p')
    timestampText.textContent = `Generated on: ${now.toLocaleString('en-US', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
      timeZoneName: 'short'
    })}`
    timestampText.style.margin = '5px 0 0 0'
    timestampText.style.fontSize = '12px'
    timestampText.style.color = '#777'
    
    titleDiv.appendChild(titleText)
    titleDiv.appendChild(subtitleText)
    titleDiv.appendChild(timestampText)
    
    // Empty div for balance
    const emptyDiv = document.createElement('div')
    emptyDiv.style.width = logoDiv.style.width
    
    headerDiv.appendChild(logoDiv)
    headerDiv.appendChild(titleDiv)
    headerDiv.appendChild(emptyDiv)
    
    // Clone the chart
    const chartClone = chartRef.current.cloneNode(true) as HTMLDivElement
    chartClone.style.padding = '20px'
    chartClone.style.backgroundColor = 'white'
    
    // Create footer with disclaimer
    const disclaimerDiv = document.createElement('div')
    disclaimerDiv.style.marginTop = '20px'
    disclaimerDiv.style.padding = '15px'
    disclaimerDiv.style.backgroundColor = '#f5f5f5'
    disclaimerDiv.style.borderTop = '1px solid #ddd'
    
    const disclaimerText = document.createElement('p')
    disclaimerText.innerHTML = `
      <strong>Disclaimer:</strong> This document is generated by PixWingAi Pvt Ltd and is intended solely for authorized users from ${clientName}.
      The information contained within is confidential and proprietary to PixWingAi Pvt Ltd. Unauthorized distribution, reproduction, or modification
      of this document, in whole or in part, is strictly prohibited. PixWingAi Pvt Ltd retains full ownership of the data, and its use is subject to
      applicable company policies and legal agreements. For any queries or permissions, please contact support@pixwingai.com
    `
    disclaimerText.style.margin = '0'
    disclaimerText.style.fontSize = '10px'
    disclaimerText.style.lineHeight = '1.4'
    disclaimerText.style.color = '#666'
    
    disclaimerDiv.appendChild(disclaimerText)
    
    // Assemble the full page
    fullPageDiv.appendChild(headerDiv)
    fullPageDiv.appendChild(chartClone)
    fullPageDiv.appendChild(disclaimerDiv)
    
    // Wait for images to load
    await new Promise(resolve => setTimeout(resolve, 500))
    
    // Capture the full page
    const canvas = await html2canvas(fullPageDiv, {
      scale: 2, // Higher quality
      useCORS: true,
      logging: false,
      allowTaint: true
    })
    
    // Clean up
    document.body.removeChild(fullPageDiv)
    
    // Create PDF
    const imgData = canvas.toDataURL('image/png')
    const pdf = new jsPDF('l', 'mm', 'a4')
    const pageWidth = pdf.internal.pageSize.getWidth()
    const pageHeight = pdf.internal.pageSize.getHeight()
    
    const imgWidth = canvas.width
    const imgHeight = canvas.height
    const ratio = Math.min(pageWidth / imgWidth, pageHeight / imgHeight)
    
    const finalWidth = imgWidth * ratio
    const finalHeight = imgHeight * ratio
    const xOffset = (pageWidth - finalWidth) / 2
    const yOffset = (pageHeight - finalHeight) / 2
    
    pdf.addImage(imgData, 'PNG', xOffset, yOffset, finalWidth, finalHeight)
    pdf.save(`${title.toLowerCase().replace(/\s+/g, '_')}.pdf`)
    
  } catch (error) {
    console.error('Error generating PDF:', error)
    alert('There was an error generating the PDF. Please try again.')
  }
}

/**
 * Exports chart data to Excel with company branding and disclaimer
 */
export const exportChartToExcel = ({ title, data, clientName = "(client organization name)" }: ExportOptions) => {
  if (!data || data.length === 0) {
    console.error('No data to export')
    return
  }
  
  const wb = XLSX.utils.book_new()
  
  // Format the timestamp
  const now = new Date()
  const formattedDate = now.toLocaleString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit',
    timeZoneName: 'short'
  })
  
  // Create disclaimer rows for the Excel file
  const disclaimerRows = [
    { 'PixWingAi Pvt Ltd': `Report: ${title}` },
    { 'PixWingAi Pvt Ltd': `Generated on: ${formattedDate}` },
    { 'PixWingAi Pvt Ltd': '' },
    { 'PixWingAi Pvt Ltd': `Disclaimer: This document is generated by PixWingAi Pvt Ltd and is intended solely for authorized users from ${clientName}.` },
    { 'PixWingAi Pvt Ltd': 'The information contained within is confidential and proprietary to PixWingAi Pvt Ltd. Unauthorized distribution, reproduction, or modification' },
    { 'PixWingAi Pvt Ltd': 'of this document, in whole or in part, is strictly prohibited. PixWingAi Pvt Ltd retains full ownership of the data, and its use is subject to' },
    { 'PixWingAi Pvt Ltd': 'applicable company policies and legal agreements.' },
    { 'PixWingAi Pvt Ltd': 'For any queries or permissions, please contact support@pixwingai.com' },
    { 'PixWingAi Pvt Ltd': '' },
    { 'PixWingAi Pvt Ltd': '' }
  ]
  
  // Create worksheet with disclaimer at the top
  const ws = XLSX.utils.json_to_sheet(disclaimerRows, { header: ['PixWingAi Pvt Ltd'] })
  
  // Append the actual data after the disclaimer
  XLSX.utils.sheet_add_json(ws, data, { 
    origin: { r: disclaimerRows.length, c: 0 },
    skipHeader: false
  })
  
  // Set column widths for better readability
  const colWidths = [{ wch: 40 }] // Width of the first column
  ws['!cols'] = colWidths
  
  XLSX.utils.book_append_sheet(wb, ws, title)
  XLSX.writeFile(wb, `${title.toLowerCase().replace(/\s+/g, '_')}.xlsx`)
}

/**
 * Component to add export buttons to any chart
 */
export const ChartExportButtons = ({ 
  title, 
  data, 
  chartRef,
  clientName = "(client organization name)",
  className = ""
}: ExportOptions & { className?: string }) => {
  const handlePrint = () => {
    exportChartToPDF({ title, data, chartRef, clientName })
  }
  
  const handleExportToExcel = () => {
    exportChartToExcel({ title, data, chartRef, clientName })
  }
  
  return (
    <div className={`flex gap-2 ${className}`}>
      <button 
        onClick={handlePrint}
        className="bg-gradient-to-r from-purple-500 to-purple-600 hover:from-purple-600 hover:to-purple-700 text-white px-4 py-2 rounded-md shadow-lg hover:shadow-xl transition-all duration-300"
      >
        Print Chart
      </button>
      <button 
        onClick={handleExportToExcel}
        className="bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 text-white px-4 py-2 rounded-md shadow-lg hover:shadow-xl transition-all duration-300"
      >
        Export to Excel
      </button>
    </div>
  )
}
