"use client"

import { useRef } from "react"
import * as XLSX from 'xlsx'
import html2canvas from 'html2canvas'
import jsPDF from 'jspdf'
import { Button } from "@/components/ui/button"
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogFooter,
} from "@/components/ui/dialog"

interface ChartDialogProps {
  title: string
  isOpen: boolean
  onClose: () => void
  children: React.ReactNode
  data: any
}

export function ChartDialog({ title, isOpen, onClose, children, data }: ChartDialogProps) {
  const chartRef = useRef<HTMLDivElement>(null)

  const handlePrint = async () => {
    if (chartRef.current) {
      try {
        // Create a new div for printing
        const printDiv = document.createElement('div')
        printDiv.style.position = 'absolute'
        printDiv.style.left = '-9999px'
        printDiv.style.padding = '20px'
        document.body.appendChild(printDiv)
        
        // Create header with company logo and name
        const headerDiv = document.createElement('div')
        headerDiv.style.display = 'flex'
        headerDiv.style.alignItems = 'center'
        headerDiv.style.marginBottom = '30px'
        headerDiv.style.gap = '10px'
        
        // Add logo
        const logoImg = document.createElement('img')
        logoImg.src = 'https://hebbkx1anhila5yf.public.blob.vercel-storage.com/Untitled%20(1)%20(1)-Gp2IRlutxcfRET7C0Zeo7LmzdxZcV0.png'
        logoImg.style.height = '40px'
        logoImg.style.width = '40px'
        logoImg.style.objectFit = 'contain'
        
        // Add company name and title container
        const titleContainer = document.createElement('div')
        titleContainer.style.display = 'flex'
        titleContainer.style.flexDirection = 'column'
        
        const companyName = document.createElement('h2')
        companyName.textContent = 'PixWingAI'
        companyName.style.margin = '0'
        companyName.style.fontSize = '20px'
        companyName.style.fontWeight = 'bold'
        
        const chartTitle = document.createElement('h3')
        chartTitle.textContent = title
        chartTitle.style.margin = '4px 0 0 0'
        chartTitle.style.fontSize = '16px'
        chartTitle.style.color = '#666'
        
        titleContainer.appendChild(companyName)
        titleContainer.appendChild(chartTitle)
        
        // Add timestamp
        const timestampDiv = document.createElement('div')
        timestampDiv.style.marginLeft = 'auto'
        timestampDiv.style.fontSize = '12px'
        timestampDiv.style.color = '#666'
        timestampDiv.textContent = `Generated on: ${new Date().toLocaleString()}`
        
        // Assemble header
        headerDiv.appendChild(logoImg)
        headerDiv.appendChild(titleContainer)
        headerDiv.appendChild(timestampDiv)
        
        // Clone and center the chart
        const chartClone = chartRef.current.cloneNode(true) as HTMLDivElement
        const chartContainer = document.createElement('div')
        chartContainer.style.display = 'flex'
        chartContainer.style.justifyContent = 'center'
        chartContainer.style.alignItems = 'center'
        chartContainer.style.minHeight = '500px'
        chartContainer.appendChild(chartClone)
        
        // Create footer with disclaimer
        const disclaimerDiv = document.createElement('div')
        disclaimerDiv.style.marginTop = '30px'
        disclaimerDiv.style.padding = '15px'
        disclaimerDiv.style.backgroundColor = '#f5f5f5'
        disclaimerDiv.style.borderRadius = '4px'
        disclaimerDiv.style.fontSize = '10px'
        disclaimerDiv.style.color = '#666'
        disclaimerDiv.style.lineHeight = '1.4'
        disclaimerDiv.innerHTML = `
          <strong>Disclaimer:</strong> This document is generated by PixWingAI and is intended solely for authorized users.
          The information contained within is confidential and proprietary. Unauthorized distribution, reproduction, or modification
          of this document is strictly prohibited. For any queries, please contact support@pixwingai.com
        `
        
        // Assemble the full page
        printDiv.appendChild(headerDiv)
        printDiv.appendChild(chartContainer)
        printDiv.appendChild(disclaimerDiv)
        
        // Convert to PDF
        const pdf = new jsPDF({
          orientation: 'landscape',
          unit: 'px',
          format: 'a4',
        })
        
        const canvas = await html2canvas(printDiv, {
          scale: 2,
          useCORS: true,
          logging: false,
        })
        
        const imgData = canvas.toDataURL('image/png')
        const pdfWidth = pdf.internal.pageSize.getWidth()
        const pdfHeight = pdf.internal.pageSize.getHeight()
        const imgWidth = canvas.width
        const imgHeight = canvas.height
        const ratio = Math.min(pdfWidth / imgWidth, pdfHeight / imgHeight)
        
        const imgX = (pdfWidth - imgWidth * ratio) / 2
        const imgY = 20
        
        pdf.addImage(imgData, 'PNG', imgX, imgY, imgWidth * ratio, imgHeight * ratio)
        pdf.save(`${title.toLowerCase().replace(/\s+/g, '-')}-${new Date().toISOString().split('T')[0]}.pdf`)
        
        // Cleanup
        document.body.removeChild(printDiv)
      } catch (error) {
        console.error('Error generating PDF:', error)
      }
    }
  }

  const handleExportToExcel = () => {
    const wb = XLSX.utils.book_new()
    
    // Format the timestamp
    const now = new Date()
    const formattedDate = now.toLocaleString('en-US', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
      timeZoneName: 'short'
    })
    
    // Create disclaimer rows for the Excel file
    const disclaimerRows = [
      { 'PixWingAi Pvt Ltd': `Report: ${title}` },
      { 'PixWingAi Pvt Ltd': `Generated on: ${formattedDate}` },
      { 'PixWingAi Pvt Ltd': '' },
      { 'PixWingAi Pvt Ltd': 'Disclaimer: This document is generated by PixWingAi Pvt Ltd and is intended solely for authorized users from (client organization name).' },
      { 'PixWingAi Pvt Ltd': 'The information contained within is confidential and proprietary to PixWingAi Pvt Ltd. Unauthorized distribution, reproduction, or modification' },
      { 'PixWingAi Pvt Ltd': 'of this document, in whole or in part, is strictly prohibited. PixWingAi Pvt Ltd retains full ownership of the data, and its use is subject to' },
      { 'PixWingAi Pvt Ltd': 'applicable company policies and legal agreements.' },
      { 'PixWingAi Pvt Ltd': 'For any queries or permissions, please contact support@pixwingai.com' },
      { 'PixWingAi Pvt Ltd': '' },
      { 'PixWingAi Pvt Ltd': '' }
    ]
    
    // Create worksheet with disclaimer at the top
    const ws = XLSX.utils.json_to_sheet(disclaimerRows, { header: ['PixWingAi Pvt Ltd'] })
    
    // Append the actual data after the disclaimer
    const processedData = Array.isArray(data) ? data : [data]
    XLSX.utils.sheet_add_json(ws, processedData, { 
      origin: { r: disclaimerRows.length, c: 0 },
      skipHeader: false
    })
    
    // Set column widths for better readability
    const colWidths = [{ wch: 40 }] // Width of the first column
    ws['!cols'] = colWidths
    
    XLSX.utils.book_append_sheet(wb, ws, title)
    XLSX.writeFile(wb, `${title.toLowerCase().replace(/\s+/g, '_')}.xlsx`)
  }

  return (
    <Dialog open={isOpen} onOpenChange={(open) => !open && onClose()}>
      <DialogContent className="max-w-4xl max-h-[90vh] overflow-auto">
        <DialogHeader>
          <div className="flex items-center justify-between border-b pb-4">
            <div className="flex items-center gap-2">
              <img
                src="https://hebbkx1anhila5yf.public.blob.vercel-storage.com/Untitled%20(1)%20(1)-Gp2IRlutxcfRET7C0Zeo7LmzdxZcV0.png"
                alt="PixWingAI Logo"
                className="h-8 w-8 object-contain"
              />
              <span className="text-lg font-bold">PixWingAI</span>
            </div>
            <DialogTitle className="text-xl font-semibold">{title}</DialogTitle>
            <div className="w-[100px]"></div> {/* Spacer for balance */}
          </div>
        </DialogHeader>
        
        <div ref={chartRef} className="flex justify-center items-center p-8">
          {children}
        </div>

        <DialogFooter>
          <div className="flex space-x-2">
            <Button
              onClick={handlePrint}
              className="bg-gradient-to-r from-purple-500 to-purple-600 hover:from-purple-600 hover:to-purple-700 text-white"
            >
              Print Chart
            </Button>
            <Button
              onClick={handleExportToExcel}
              className="bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 text-white"
            >
              Export to Excel
            </Button>
            <Button 
              onClick={onClose}
              className="bg-gradient-to-r from-gray-500 to-gray-600 hover:from-gray-600 hover:to-gray-700 text-white"
            >
              Close
            </Button>
          </div>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  )
}
